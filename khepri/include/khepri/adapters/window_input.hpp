#pragma once

#include <khepri/application/window.hpp>
#include <khepri/ui/events.hpp>

#include <mutex>
#include <vector>

namespace khepri {

/**
 * \brief Generates UI input events for events generated from a window.
 */
class WindowInputEventGenerator
{
public:
    explicit WindowInputEventGenerator(khepri::application::Window& window);

    /**
     * \brief Adds an event handler to this generator.
     *
     * This handler will receive input events generated by this generator. Handlers are called in
     * the order they were added. The first handler that returns true from HandleEvent will stop the
     * event propagation, i.e. no further handlers will be called for that event.
     *
     * \param handler the event handler to add
     */
    void AddEventHandler(ui::InputEventHandler* handler);

    /**
     * \brief Removes an event handler from this generator.
     *
     * This will stop the handler from receiving any further input events.
     */
    void RemoveEventHandler(ui::InputEventHandler* handler);

private:
    void DispatchEvent(const ui::InputEvent& event) const;

    mutable std::mutex                  m_mutex;
    std::vector<ui::InputEventHandler*> m_handlers;
};

} // namespace khepri